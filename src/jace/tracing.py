# JaCe - JAX Just-In-Time compilation using DaCe (Data Centric Parallel Programming)
#
# Copyright (c) 2024, ETH Zurich
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

"""
Implements the tracing machinery that is used to build the Jaxpr.

Essentially, Jax provides `jax.make_jaxpr()` which is essentially a debug utility. Jax
does not provide any public way to get a Jaxpr. This module provides the necessary
functionality for use in JaCe.
"""

from __future__ import annotations

import inspect
from typing import TYPE_CHECKING, Any

import jax
from jax import tree_util as jax_tree


if TYPE_CHECKING:
    from collections.abc import Callable, Mapping, Sequence


def trace_and_flatten_function(
    fun: Callable,
    trace_call_args: Sequence[Any],
    trace_call_kwargs: Mapping[str, Any],
    trace_options: Mapping[str, Any],
) -> tuple[jax.core.ClosedJaxpr, list[Any], jax_tree.PyTreeDef]:
    """
    Traces `fun` and generates the Jaxpr and some related meta data.

    For tracing the computation `fun` the function uses the `trace_call_args`
    and `trace_call_kwargs` arguments, both should not be flattened. Furthermore,
    the tracing is done in enabled x64 mode.

    Returns:
        The function will return a tuple of length three.
        1) The Jaxpr that was generated by Jax using the supplied arguments and options.
        2) The flattened input.
        3) A pytree describing the output.

    Args:
        fun: The original Python computation.
        trace_call_args: The positional arguments that should be used for
            tracing the computation.
        trace_call_kwargs: The keyword arguments that should be used for
            tracing the computation.
        trace_options: The options used for tracing, the same arguments that
            are supported by `jace.jit`.

    Todo:
        - Handle default arguments of `fun`.
        - Handle static arguments.
        - Turn `trace_options` into a `TypedDict` and sync with `jace.jit`.
    """
    if trace_options:
        raise NotImplementedError(
            f"Not supported tracing options: {', '.join(f'{k}' for k in trace_options)}"
        )
    assert all(param.default is param.empty for param in inspect.signature(fun).parameters.values())

    # In Jax `float32` is the main datatype, and they go to great lengths to avoid some
    #  aggressive [type promotion](https://jax.readthedocs.io/en/latest/type_promotion.html).
    #  However, in this case we will have problems when we call the SDFG, for some
    #  reasons `CompiledSDFG` does not work in that case correctly, thus we enable it
    #  for the tracing.
    with jax.experimental.enable_x64():
        # TODO(phimuell): copy the implementation of the real tracing
        jaxpr, outshapes = jax.make_jaxpr(fun, return_shape=True)(
            *trace_call_args, **trace_call_kwargs
        )

    # Regardless what the documentation of `make_jaxpr` claims, it does not output a
    #  pytree instead an abstract description of the shape, that we will transform into
    #  a pytree.
    outtree = jax_tree.tree_structure(outshapes)

    # Make the input tree
    flat_in_vals = jax_tree.tree_leaves((trace_call_args, trace_call_kwargs))
    assert len(jaxpr.in_avals) == len(flat_in_vals), "Static arguments not implemented."

    return jaxpr, flat_in_vals, outtree

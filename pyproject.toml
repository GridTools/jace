[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61"]

[project]
authors = [
  {name = "ETH Zurich", email = "gridtools@cscs.ch"}
]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed"
]
dependencies = []
description = "JAX jit using DaCe (Data Centric Parallel Programming)"
name = "JaCe"
readme = "README.md"
requires-python = ">=3.10"
version = "0.1.0"
license.file = "LICENSE"

[project.urls]
"Bug Tracker" = "https://github.com/GridTools/JaCe/issues"
Changelog = "https://github.com/GridTools/JaCe/releases"
Discussions = "https://github.com/GridTools/JaCe/discussions"
Homepage = "https://github.com/GridTools/JaCe"

[tool.coverage]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:'
]
run.source = ["jace"]

# -- mypy  --
[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
files = ["src", "tests"]
ignore_missing_imports = false
implicit_optional = false
implicit_reexport = false
# install_types = true
namespace_packages = false
# pretty = true
python_version = "3.10"
show_column_numbers = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_incomplete_defs = false
disallow_untyped_defs = false
ignore_missing_imports = true
module = "tests.*"

# -- pytest  --
[tool.pytest]

[tool.pytest.ini_options]
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
filterwarnings = [
  "error"
]
log_cli_level = "INFO"
minversion = "6.0"
testpaths = [
  "tests"
]
xfail_strict = true

# -- ruff --
[tool.ruff]
line-length = 100
respect-gitignore = true
show-fixes = true
src = ["src"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
extend-select = [
  "A",  # flake8-builtins
  "B",  # flake8-bugbear
  "I",  # isort
  "G",  # flake8-logging-format
  "C4",  # flake8-comprehensions
  "PT",  # flake8-pytest-style
  "UP",  # pyupgrade  # TODO: evaluate and remove if needed
  "ARG",  # flake8-unused-arguments
  "ERA",  # eradicate
  "ICN",  # flake8-import-conventions
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return  # TODO: evaluate and remove if needed
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify  # TODO: evaluate and remove if needed
  "T10",  # flake8-debugger
  "T20",  # flake8-print  # TODO: evaluate and remove if needed
  "NPY"  # NumPy specific rules
]
ignore = [
  'E501'  # [line-too-long]
]
ignore-init-module-imports = true
unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ['jace']
known-third-party = [
  'cupy',
  'dace',
  'jax',
  'numpy',
  'pytest',
  'typing_extensions'
]
lines-after-imports = 2
order-by-type = true
required-imports = ["from __future__ import annotations"]
section-order = [
  'future',
  'standard-library',
  'third-party',
  'first-party',
  'tests',
  'local-folder'
]

[tool.ruff.lint.per-file-ignores]
"noxfile.py" = ["T20"]
"tests/**" = ["T10", "T20"]

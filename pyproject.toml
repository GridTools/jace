[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=61",
]

[project]
authors = [
  {name = "ETH Zurich", email = "gridtools@cscs.ch"},
]
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dependencies = [
  "dace>=0.16",
  "jax[cpu]>=0.4.33",
  "numpy>=1.26.0",
]
description = "JAX jit using DaCe (Data Centric Parallel Programming)"
name = "JaCe"
readme = "README.md"
requires-python = ">=3.10"
version = "0.1.0"
license.file = "LICENSE"

[project.optional-dependencies]
cuda12 = [
  "cupy-cuda12x>=12.1.0",
  "jax[cuda12]>=0.4.24",
  "optuna>=3.4.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/GridTools/JaCe/issues"
Changelog = "https://github.com/GridTools/JaCe/releases"
Discussions = "https://github.com/GridTools/JaCe/discussions"
Homepage = "https://github.com/GridTools/JaCe"

# -- coverage --
[tool.coverage]

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
exclude_also = [
  '\.\.\.',
  'if TYPE_CHECKING:',
  'if typing.TYPE_CHECKING:',
  'def __repr__',
  '@overload',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'if __name__ == .__main__.:',
  '@(abc\\.)?abstractmethod',
  '@(abc\\.)?abstract',
  'class .*\bProtocol\):',
]

[tool.coverage.run]
branch = true
dynamic_context = "test_function"
source = ["jace"]

# -- mypy  --
[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
files = ["src", "tests"]
ignore_missing_imports = false
implicit_optional = false
implicit_reexport = false
# install_types = true
namespace_packages = false
# pretty = true
python_version = "3.10"
show_column_numbers = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_incomplete_defs = false
disallow_untyped_defs = false
ignore_missing_imports = true
module = [
  "tests.*",
  "dace.*",
  "jax.*",
  "jaxlib.*",
  "cupy.",
]

# -- pytest  --
[tool.pytest]

[tool.pytest.ini_options]
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
filterwarnings = [
  "error",
  "ignore:numpy\\..*:DeprecationWarning",  # DaCe is not NumPy v2.0 ready so ignore the usage of deprecated features.
]
log_cli_level = "INFO"
minversion = "6.0"
testpaths = ["tests"]
xfail_strict = true

# -- ruff --
[tool.ruff]
line-length = 100
preview = true
respect-gitignore = true
show-fixes = true
src = ["src"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
extend-safe-fixes = ["D", "TCH"]
extend-select = [
  "A",  # flake8-builtins
  "B",  # flake8-bugbear
  "I",  # isort
  "G",  # flake8-logging-format
  "N",  # pep8-naming
  "W",  # pycodestyle-warning
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  "D",  # pydocstyle
  "D213",  # multi-line-summary-second-line (off by default in pydocstyle "google' convention)
  "PT",  # flake8-pytest-style
  "TD",  # flake8-todo
  "UP",  # pyupgrade
  "ARG",  # flake8-unused-arguments
  "ERA",  # eradicate
  "FLY",  # flynt
  "ICN",  # flake8-import-conventions
  "NPY",  # NumPy specific rules
  "PERF",  # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "SLOT",  # flake8-slots
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TCH",  # flake8-type-checking
  "TRY",  # tryceratops
]
ignore = [
  "B905",  # [zip-without-explicit-strict]
  "D105",  # [undocumented-magic-method]
  "D107",  # [undocumented-public-init]
  "D212",  # [multi-line-summary-first-line]
  "D402",  # [no-signature]
  "E501",  # [line-too-long]
  "TCH003",  # [typing-only-standard-library-import]
  "TD003",  # [missing-todo-link]
  "TRY003",  # [raise-vanilla-args]  # TODO(egparedes): reevaluate if it should be activated
  "UP038",  # [non-pep604-isinstance]
]
task-tags = ["TODO"]
# ignore-init-module-imports = true  # deprecated in preview mode
unfixable = []

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["jace"]
known-third-party = [
  "cupy",
  "dace",
  "jax",
  "numpy",
  "pytest",
  "typing_extensions",
]
lines-after-imports = 2
order-by-type = true
required-imports = ["from __future__ import annotations"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "tests",
  "local-folder",
]

[tool.ruff.lint.isort.sections]
tests = [
  "tests",
  "unit_tests",
  "integration_tests",
]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"!tests/**" = ["PT"]  # Ignore flake8-pytest-style outside 'tests/'
"docs/**" = [
  "D",  # pydocstyle
  "T10",  # flake8-debugger
  "T20",  # flake8-print
]
"noxfile.py" = [
  "D",  # pydocstyle
  "T10",  # flake8-debugger
  "T20",  # flake8-print
]
"requirements/**" = [
  "D",  # pydocstyle
  "T10",  # flake8-debugger
  "T20",  # flake8-print
]
"tests/**" = [
  "D",  # pydocstyle
  "N",  # TODO(egparedes): remove ignore as soon as all tests are properly named
  "PLR2004",  # [magic-value-comparison]
  "T10",  # flake8-debugger
  "T20",  # flake8-print
]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.pylint]
max-args = 6
